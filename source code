import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.arima.model import ARIMA
from sklearn.ensemble import IsolationForest

# Define the dataset
data = {
    "Date": ["2025-04-01", "2025-04-02", "2025-04-03", "2025-04-04"],
    "Open": [150.25, 151.60, 152.80, 153.50],
    "High": [152.00, 153.10, 154.00, 155.00],
    "Low": [149.75, 150.80, 151.20, 152.70],
    "Close": [151.50, 152.75, 153.40, 154.90],
    "Adj Close": [151.30, 152.60, 153.20, 154.75],
    "Volume": [1000000, 980000, 1100000, 1200000],
    "MA_5": [149.80, 150.90, 151.85, 152.70],
    "RSI_14": [55.2, 58.3, 60.5, 62.8],
    "MACD": [0.85, 1.00, 1.20, 1.35],
    "Signal_Line": [0.70, 0.78, 0.90, 1.00],
    "Sentiment_Score": [0.3, 0.6, 0.1, -0.2],
    "Day_of_Week": ["Tuesday", "Wednesday", "Thursday", "Friday"],
    "Lag_1_Close": [None, 151.50, 152.75, 153.40],
    "Target_Close": [152.00, 153.10, 154.00, 155.20]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Save as CSV file
df.to_csv("ai_stock_prediction_sample.csv", index=False)

# 1. Descriptive Statistics
print("Descriptive Statistics:")
print(df.describe())

# 2. Trend Analysis (Plotting Close price and MA_5)
df['Date'] = pd.to_datetime(df['Date'])
plt.plot(df['Date'], df['Close'], label='Close Price')
plt.plot(df['Date'], df['MA_5'], label='5-Day Moving Average', linestyle='--')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.title('Close Price and 5-Day Moving Average')
plt.show()

# 3. Correlation Analysis (Only numeric columns)
print("\nCorrelation Matrix:")
numeric_df = df.select_dtypes(include=['float64', 'int64'])  # Select only numeric columns
correlation_matrix = numeric_df.corr()
print(correlation_matrix)

# 4. Volatility Analysis
df['Daily_Return'] = df['Close'].pct_change()
volatility = df['Daily_Return'].std()
print(f"\nVolatility (Standard Deviation of Daily Return): {volatility}")

# 5. RSI and MACD Analysis
df['RSI_Status'] = ['Overbought' if rsi > 70 else 'Oversold' if rsi < 30 else 'Neutral' for rsi in df['RSI_14']]
df['MACD_Crossover'] = ['Buy' if macd > signal else 'Sell' for macd, signal in zip(df['MACD'], df['Signal_Line'])]

print("\nRSI Status and MACD Crossover Signals:")
print(df[['Date', 'RSI_14', 'RSI_Status', 'MACD', 'Signal_Line', 'MACD_Crossover']])

# 6. Sentiment Analysis Impact (Visualize Sentiment vs Close Price)
plt.scatter(df['Sentiment_Score'], df['Close'])
plt.xlabel('Sentiment Score')
plt.ylabel('Close Price')
plt.title('Sentiment Score vs Close Price')
plt.show()

# 7. Predictive Modeling (Linear Regression)
X = df[['Open', 'High', 'Low', 'Close', 'Volume', 'MA_5', 'RSI_14', 'MACD', 'Signal_Line', 'Sentiment_Score']]
y = df['Target_Close']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f"\nMean Squared Error (Linear Regression): {mse}")

# 8. Time Series Forecasting (ARIMA)
df.set_index('Date', inplace=True)
model_arima = ARIMA(df['Close'], order=(1, 1, 1))
model_arima_fit = model_arima.fit()

forecast = model_arima_fit.forecast(steps=5)
print("\nARIMA Model Future Price Predictions:", forecast)

# 9. Anomaly Detection (Isolation Forest)
model_if = IsolationForest(contamination=0.1)  # Corrected variable name here
df['Anomaly'] = model_if.fit_predict(df[['Close', 'Volume']])
outliers = df[df['Anomaly'] == -1]

# Reset index to bring 'Date' back as a column
outliers_reset = outliers.reset_index()

print("\nAnomalies Detected:")
print(outliers_reset[['Date', 'Close', 'Volume', 'Anomaly']])

# 10. Seasonality Analysis (Average Close by Day of Week)
day_of_week_avg = df.groupby('Day_of_Week')['Close'].mean()
print("\nAverage Close Price by Day of Week:")
print(day_of_week_avg)
